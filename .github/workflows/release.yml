name: 'release'

# Controls when the workflow will run
on:
  # Triggers the workflow on just release branches (these should be deployed to SIT and higher environments)
  push:
    branches: 
      - 'release/**'

jobs:
  check_build_integrity:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm run build

  docker_build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set branch name
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          pull: true
          tags: ${{ secrets.AWS_DEV_ECR_REGISTRY }}/aide-frontend:${{ env.BRANCH_NAME }} , ${{ secrets.AWS_DEV_ECR_REGISTRY }}/aide-frontend:latest

  Deploy:
    needs: [check_build_integrity, docker_build]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      
      - name: Set branch name
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
      
      - name: Create artifacts folder and copy helm charts
        run: |
          mkdir -p "$GITHUB_WORKSPACE/artifacts/aide-frontend/helm"
          cp -a $GITHUB_WORKSPACE/helm/. $GITHUB_WORKSPACE/artifacts/aide-frontend/helm/
          echo BASE_PATH="$GITHUB_WORKSPACE/artifacts/aide-frontend" >> $GITHUB_ENV
          echo OUT_FOLDER="$GITHUB_WORKSPACE/artifacts/" >> $GITHUB_ENV
      
      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1.2.0
        with:
          version: latest
      
      - name: Package AIDE FrontEnd
        run: |
          octo pack --id="AIDE.FrontEnd" --format="Zip" --version="${{ env.BRANCH_NAME }}" --basePath="${{ env.BASE_PATH }}" --outFolder="${{ env.OUT_FOLDER }}" --logLevel=debug
      
      - name: Push Package to Octopus Deploy
        uses: OctopusDeploy/push-package-action@v2.1.0
        env:
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
          OCTOPUS_HOST: ${{ secrets.OCTOPUS_HOST }}
          OCTOPUS_SPACE: ${{ secrets.OCTOPUS_SPACE }}
        with:
          packages: |
            **/artifacts/AIDE.FrontEnd.${{ env.BRANCH_NAME }}.zip

      - name: Create Release in Octopus Deploy
        uses: OctopusDeploy/create-release-action@v2.0.1
        env:
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
          OCTOPUS_HOST: ${{ secrets.OCTOPUS_HOST }}
          OCTOPUS_SPACE: ${{ secrets.OCTOPUS_SPACE }}
        with:
          project: 'AIDE Frontend'
          git_ref: 'master'
          release_number: "${{ env.BRANCH_NAME }}"
          package_version: "${{ env.BRANCH_NAME }}"


