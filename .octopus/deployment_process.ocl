step "add-docker-image-pull-secret" {
    name = "Add Docker Image Pull Secret"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                export AWS_ACCESS_KEY_ID=$(get_octopusvariable "AWS_ACCESS_KEY_ID")
                export AWS_SECRET_ACCESS_KEY=$(get_octopusvariable "AWS_SECRET_ACCESS_KEY")
                export AWS_DEFAULT_REGION=$(get_octopusvariable "AWS_REGION")
                
                kubectl create namespace aide --dry-run=client -o yaml | kubectl apply -f -
                
                kubectl create secret docker-registry $(get_octopusvariable "imagePullSecretName") \
                  --docker-server=$(get_octopusvariable "AWS_ACCOUNT").dkr.ecr.$(get_octopusvariable "AWS_REGION").amazonaws.com \
                  --docker-username=AWS \
                  --docker-password=$(aws ecr get-login-password) \
                  --namespace=aide \
                  --dry-run=client -o yaml | kubectl apply -f -
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = "WorkerPoolName"
    }
}

step "add-storage" {
    name = "Add storage"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                cat <<EOF >> sc.yml
                apiVersion: storage.k8s.io/v1
                kind: StorageClass
                metadata:
                   name: $(get_octopusvariable "StorageClassName")
                provisioner: kubernetes.io/no-provisioner
                volumeBindingMode: WaitForFirstConsumer
                EOF
                
                kubectl apply -f sc.yml
                rm -f sc.yml
                
                for node in $(kubectl get nodes --output=jsonpath={.items..metadata.name}); 
                do cat <<EOF >> pv.yml
                apiVersion: v1
                kind: PersistentVolume
                metadata:
                  name: $(get_octopusvariable "PersistentVolumeName")-$node
                  labels:
                    rabbitmq: "true"
                spec:
                  capacity:
                    storage: $(get_octopusvariable "PersistentVolumeStorageCapacity")
                  volumeMode: Filesystem
                  accessModes:
                  - ReadWriteOnce
                  persistentVolumeReclaimPolicy: Retain
                  storageClassName: $(get_octopusvariable "StorageClassName")
                  local:
                    path: $(get_octopusvariable "PersistentVolumeLocalPath")
                  nodeAffinity:
                    required:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - key: kubernetes.io/hostname
                          operator: In
                          values:
                          - $node
                EOF
                
                kubectl apply -f pv.yml
                rm -f pv.yml;
                done;
                
                cat <<EOF >> pvc.yml
                apiVersion: v1
                kind: PersistentVolumeClaim
                metadata:
                  name: gateway-storage-claim
                  namespace: monai
                spec:
                  storageClassName: "$(get_octopusvariable "StorageClassName")"
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 1Gi
                EOF
                kubectl apply -f pvc.yml
                rm -f pvc.yml;
                
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = "WorkerPoolName"
    }
}

step "add-secrets" {
    name = "Add secrets"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = "kubectl -n $(get_octopusvariable \"namespace\") create secret generic rabbit-secret-master --from-literal=username=$(get_octopusvariable \"RabbitUser\") --from-literal=password=$(get_octopusvariable \"RabbitPassword\")  --save-config --dry-run=client -o yaml | kubectl apply -f -"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = "WorkerPoolName"
    }
}

step "deploy-the-aide-frontend" {
    name = "Deploy the AIDE Frontend"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.Helm.ClientVersion = "V3"
            Octopus.Action.Helm.Namespace = "aide"
            Octopus.Action.Helm.ReleaseName = "aide-frontend"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Helm.YamlValues = <<-EOT
                image:
                  tag: #{Octopus.Action.Package.PackageVersion}
                imagePullSecrets:
                  - name: #{imagePullSecretName}
            EOT
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.PackageId = "AIDE.FrontEnd"
        }
        worker_pool_variable = "WorkerPoolName"

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "AIDE.FrontEnd"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}